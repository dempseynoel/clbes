if (write == TRUE) {
readr::write_csv(estimate, paste("turnout_", dgraphic, ".csv"))
} else {
estimate
}
}
#' Calculate estimated election turnout by demographic characteristic
#'
#' Calculates estimated election turnout by commonly asked demographic
#' characteristic for validated British Election Study 2017 face to face
#' survey data only.
#'
#' @param dgraphic The demographic characteristic of interest. Must be
#'   defined as one of the following values: age, gender, ethnicity,
#'   religion, education. Must be defined between quotation marks.
#' @param sample A boolean which if TRUE returns the unweighted sample size.
#'   FALSE returns weighted sample size. Default value is FALSE.
#'   \code{percent} must be FALSE to show sample sizes.
#' @inheritParams turnout_query
#' @return A tibble or CSV containing turnout estimates for selected
#'   demographic.
#' @export
#'
turnout_common <- function(dgraphic = c("age", "gender",
"ethnicity", "religion", "education"),
sample = FALSE, percent = TRUE,
write = FALSE) {
# Download BES 2017 face to face survey
data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- dplyr::recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- dplyr::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- dplyr::recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- dplyr::recode(data$edlevel, '5' = 4)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 3, 4),
labels = c("No qualifications",
"Below GCSE",
"GCSE", "A-Level",
"Degree or higher"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedTurnoutBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
turnout_common(dgraphic = "ethnicity")
library(cltools)
library(haven, labelled, magrittr, tidyverse)
library(haven)
library(tidyverse)
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("yespmedleon/clbes")
library(clbes)
turnout_common(dgraphic = "ethnicity")
library(labelled)
install.packages("devtools")
devtools::install_github("yespmedleon/clbes")
library(clbes)
turnout_common(dgraphic = "ethnicity")
?recode
turnout_common <- function(dgraphic = c("age", "gender",
"ethnicity", "religion", "education"),
sample = FALSE, percent = TRUE,
write = FALSE) {
# Download BES 2017 face to face survey
data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- labelled::recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- labelled::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- labelled::recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- labelled::recode(data$edlevel, '5' = 4)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 3, 4),
labels = c("No qualifications",
"Below GCSE",
"GCSE", "A-Level",
"Degree or higher"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedTurnoutBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
turnout_common(dgraphic = "ethnicity")
BES_FTF_URL <- "http://www.britishelectionstudy.com/wp-content/uploads/2018/01/bes_f2f_2017_v1.2.sav"
turnout_common(dgraphic = "ethnicity")
turnout_common <- function(dgraphic = c("age", "gender",
"ethnicity", "religion", "education"),
sample = FALSE, percent = TRUE,
write = FALSE) {
# Download BES 2017 face to face survey
data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- labelled::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- recode(data$edlevel, '5' = 4)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 3, 4),
labels = c("No qualifications",
"Below GCSE",
"GCSE", "A-Level",
"Degree or higher"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedTurnoutBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
turnout_common(dgraphic = "ethnicity")
turnout_common <- function(dgraphic = c("age", "gender",
"ethnicity", "religion", "education"),
sample = FALSE, percent = TRUE,
write = FALSE) {
# Download BES 2017 face to face survey
data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- dplyr::recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- labelled::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- recode(data$edlevel, '5' = 4)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 3, 4),
labels = c("No qualifications",
"Below GCSE",
"GCSE", "A-Level",
"Degree or higher"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedTurnoutBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
turnout_common(dgraphic = "ethnicity")
library(magrittr)
turnout_common(dgraphic = "ethnicity")
install.packages("devtools")
devtools::install_github("yespmedleon/clbes")
clbes::turnout_common(dgraphic = "ethnicity")
turnout_common <- function(dgraphic = c("age", "gender",
"ethnicity", "religion", "education"),
sample = FALSE, percent = TRUE,
write = FALSE) {
# Download BES 2017 face to face survey
data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- dplyr::recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- dplyr::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- dplyr::recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- dplyr::recode(data$edlevel, '5' = 4)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 3, 4),
labels = c("No qualifications",
"Below GCSE",
"GCSE", "A-Level",
"Degree or higher"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedTurnoutBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
library(magrittr)
BES_FTF_URL <- "http://www.britishelectionstudy.com/wp-content/uploads/2018/01/bes_f2f_2017_v1.2.sav"
turnout_common(dgraphic = "ethnicity")
library(labelled)
turnout_common(dgraphic = "ethnicity")
install.packages("devtools")
devtools::install_github("yespmedleon/clbes")
clbes::turnout_common(dgraphic = "ethnicity")
devtools::uninstall("yespmedleon/clbes")
devtools::uninstall("clbes")
devtools::load_all(".")
turnout_common("ethnicity")
library(labelled)

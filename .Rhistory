data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- dplyr::recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- dplyr::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- dplyr::recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- dplyr::recode(data$education, '1' = 1, '2' = 1,
'3' = 2, '4' = 2,'5' = 2, '6' = 2,
'7' = 2, '8' = 2, '9'= 2, '10' = 2,
'11' = 2, '12' = 2, '13' = 2, '14' = 2,
'15' = 2, '16' = 2, '17' = 2,'18' = 2,
'19' = 2, '20' = 2, '21' = -2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, -2, -999),
labels = c("No qualifications",
"Degree or higher",
"Other", "Refused",
"Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedvoteBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
turnout_common("religion", percent = FALSE, sample = TRUE)
library(labelled)
# Constants -------------------------------------------------------------------
BES_FTF_URL <- "http://www.britishelectionstudy.com/wp-content/uploads/2018/01/bes_f2f_2017_v1.2.sav"
# Functions -------------------------------------------------------------------
#' Calculate estimated election turnout by demographic characteristic
#'
#' Calculates estimated election turnout by demographic characteristic for
#' British Election Study survey data.
#'
#' @param data A dataframe containing British Election Study internet or face
#'   to face survey data imported imported using the
#'   \href{https://cran.r-project.org/web/packages/haven/index.html}{haven}
#'   package.
#' @param dgraphic The name of the variable for the demographic characteristic
#'   of interest. Must be defined between quotation marks.
#' @param vote The name of the variable which captures response from suvey
#'   respondent to the question if they voted or not in the election of
#'   interest. Must be defined between quotation marks.
#' @param wt The name of the weight variable to be used in analysis. Must
#'   be defined between quotation marks.
#' @param validated Use when survey respondent's vote registeration has not
#'   been validated by British Election Study. A boolean which if FALSE
#'   filters \code{data} to show those survey respondents who are over the age
#'   of 18 and say they are registered to vote. If FALSE \code{result} must be
#'   defined. Default value is TRUE.
#' @param result Use when \code{validated} is FALSE. A numeric between 0 and 1
#'   for the known turnout percentage for the election in Great Britain.
#'   Default value is 0.
#' @param sample A boolean which if TRUE returns the unweighted sample size.
#'   Default value is FALSE.
#' @param percent A boolean which if FALSE does not calculate turnout
#'   percentages. Default value is TRUE.
#' @param write A boolean which if TRUE creates a CSV in working directory.
#'   Default value is FALSE.
#' @return A tibble or CSV containing turnout estimates for selected
#'   demographic.
#' @export
#'
turnout_query <-  function(data, dgraphic, vote, wt,
validated = TRUE, result = 0,
sample = FALSE, percent = TRUE,
write = FALSE) {
# Create dataframe variables in function environment
data$dgraphic <- as.character(haven::as_factor(data[[dgraphic]]))
data$vote <- as.character(haven::as_factor(data[[vote]]))
data$wt <- data[[wt]]
# Filter respondents aged over and registered
if (validated == FALSE) {
data <- dplyr::filter(data, ageGroup > 1)
data <- dplyr::filter(data, registered == 1 | registered == 2)
data <- dplyr::filter(data, genElecTurnoutRetro < 2)
}
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Add column total for adjustment calculation
if (validated == FALSE) {
estimate <- cltools::add_col_totals(estimate)
}
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
}
# Adjustment to unvalidated turnout estimates
if (result != 0) {
adjust <- result / estimate$`Yes, voted`[length(estimate$`Yes, voted`)]
estimate$`Yes, voted` <- estimate$`Yes, voted` * adjust
estimate <- dplyr::select(estimate, dgraphic, `Yes, voted`)
} else {
estimate <- dplyr::select(estimate, dgraphic, contains("voted"))
}
# Write CSV file
if (write == TRUE) {
readr::write_csv(estimate, paste("turnout_", dgraphic, ".csv"))
} else {
estimate
}
}
#' Calculate estimated election turnout by demographic characteristic
#'
#' Calculates estimated election turnout by commonly asked demographic
#' characteristic for validated British Election Study 2017 face to face
#' survey data only.
#'
#' @param dgraphic The demographic characteristic of interest. Must be
#'   defined as one of the following values: age, gender, ethnicity,
#'   religion, education. Must be defined between quotation marks.
#' @inheritParams turnout_query
#' @return A tibble or CSV containing turnout estimates for selected
#'   demographic.
#' @export
#'
turnout_common <- function(dgraphic = c("age", "gender",
"ethnicity", "religion", "education"),
sample = FALSE, percent = TRUE,
write = FALSE) {
# Download BES 2017 face to face survey
data <- haven::read_spss(BES_FTF_URL)
# Create and recode dataframe variables in function environment
if (dgraphic == "age") {
data$dgraphic <- as.character(haven::as_factor(data$y10_banded))
}
if (dgraphic == "gender") {
data$dgraphic <- as.character(haven::as_factor(data$y09))
}
if (dgraphic == "ethnicity") {
data$dgraphic <- dplyr::recode(data$y11, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 2, '6' = 2, '7' = 2,
'8' = 2,'9'= 2, '10' = 2, '11' = 2,
'12' = 2, '13' = 2,'14' = 2, '15' = 2,
'16' = 2, '17' = 2, '18' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME",
"Refused", "Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "tenure") {
data$dgraphic <- dplyr::recode(data$y03, '3' = 3, '5' = 3)
data$dgraphic <- factor(data$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage",
"Social rent", "Private rent",
"Don't Know"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "religion") {
data$dgraphic <- dplyr::recode(data$y06, '1' = 1, '2' = 1, '3' = 1,
'4' = 1, '5' = 1, '6' = 1, '7' = 1,
'8' = 1, '9'= 1, '10' = 1, '11' = 1,
'12' = 2, '13' = 2, '14' = 2, '15' = 2,
'16' = 2, '17' = 2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian",
"Non-Christian", "Refused"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
if (dgraphic == "education") {
data$dgraphic <- dplyr::recode(data$education, '1' = 1, '2' = 1,
'3' = 2, '4' = 2,'5' = 2, '6' = 2,
'7' = 2, '8' = 2, '9'= 2, '10' = 2,
'11' = 2, '12' = 2, '13' = 2, '14' = 2,
'15' = 2, '16' = 2, '17' = 2,'18' = 2,
'19' = 2, '20' = 2, '21' = -2)
data$dgraphic <- factor(data$dgraphic,
levels = c(0, 1, 2, -2, -999),
labels = c("No qualifications",
"Degree or higher",
"Other", "Refused",
"Not Stated"))
data$dgraphic <- as.character(haven::as_factor(data$dgraphic))
}
# Create validated vote variable
data$vote <- as.character(haven::as_factor(data$validatedvoteBinary))
# Weight estimates
if (sample == FALSE) {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = sum(wt_vote_valid, na.rm = TRUE))
} else {
estimate <- data %>%
dplyr::group_by(dgraphic, vote) %>%
dplyr::summarise(popest = n())
}
# Round estimate figure
estimate$popest <- round(estimate$popest, 0)
# Create tibble in wide form and remove NA column
estimate <- estimate %>%
tidyr::spread(vote, popest, fill = 0) %>%
na.omit(estimate)
# Calculate turnout percentages
if (percent == TRUE) {
estimate <- cltools::get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Remove hanging "NA" column
estimate <- dplyr::select(estimate, dgraphic, Voted, -"<NA>")
# Write CSV file
if (write == FALSE) {
estimate
} else {
readr::write_csv(estimate, paste("BES_2017_FTF_turnout_",
dgraphic, ".csv"))
}
}
turnout_common("religion", percent = FALSE, sample = TRUE)
devtools::load_all(".")
turnout_common("religion")
A set of functions for use with British Election Study Data
# Noel Dempsey, House of Commons library
# 9 July 2018
# Load in packages
library(tidyverse)
library(haven)
library(cltools)
library(labelled)
# Load in data file
x <- read_spss("bes_2017_f2f.sav")
y <- read_spss("bes_2017_internet.sav")
z <- read_spss("bes_2015_internet.sav")
turnout_query <- function(x, dgraphic, turnout, wt, percent = TRUE, sample = FALSE, write = FALSE, validated = TRUE, result = 0){
# Create variables
x$dgraphic <- as.character(as_factor(x[[dgraphic]]))
x$turnout <- as.character(as_factor(x[[turnout]]))
x$wt <- x[[wt]]
# Filter out those aged under 18 and who aren't registered to vote
if (validated == FALSE) {
x <- filter(x, ageGroup > 1)
x <- filter(x, registered == 1 | registered == 2)
x <- filter(x, genElecTurnoutRetro == 0 | genElecTurnoutRetro == 1)
} else {
x
}
# Weight data
if (sample == FALSE) {
estimate <- x %>%
group_by(dgraphic, turnout) %>%
summarise(popest = sum(wt, na.rm = TRUE))
} else {
estimate <- x %>%
group_by(dgraphic, turnout) %>%
summarise(popest = n())
}
estimate$popest <- round(estimate$popest, 0)
# Create table in wide form and remove NA column
estimate <- estimate %>%
spread(turnout, popest, fill = 0) %>%
na.omit(estimate)
# Turnout validated by BES - most useful when dealing with internet panel
if (validated == TRUE) {
estimate
} else {
estimate <- add_col_totals(estimate)
}
# Calculate percentages
if (percent == TRUE) {
estimate <- get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
# Adjust yes voted column to known turnout result
if (result != 0) {
adjust <- result / estimate$`Yes, voted`[length(estimate$`Yes, voted`)]
estimate$`Yes, voted` <- estimate$`Yes, voted` * adjust
estimate <- select(estimate, dgraphic, `Yes, voted`)
} else {
estimate <- select(estimate, dgraphic, contains("voted")) # Remove hanging "NA" column
}
# Write CSV
if (write == FALSE) {
estimate
} else {
write_csv(estimate, paste("turnout_", dgraphic, ".csv"))
}
}
turnout_common <- function(dgraphic = c("age", "mage", "fage", "gender", "ethnicity", "religion", "education"), percent = TRUE, sample = FALSE, write = FALSE){
# Downlaod BES 2017 face to face survey
x <- read_spss("http://www.britishelectionstudy.com/wp-content/uploads/2018/01/bes_f2f_2017_v1.2.sav")
# Create new variables in the function environment
if (dgraphic == "age") {
x$dgraphic <- as.character(as_factor(x$y10_banded))
}
if (dgraphic == "mage") {
x <- filter(x, y09 == 1)
x$dgraphic <- as.character(as_factor(x$y10_banded))
}
if (dgraphic == "fage") {
x <- filter(x, y09 == 2)
x$dgraphic <- as.character(as_factor(x$y10_banded))
}
if (dgraphic == "gender") {
x$dgraphic <- as.character(as_factor(x$y09))
}
if (dgraphic == "ethnicity") {
x$dgraphic <- recode(x$y11, '1' = 1, '2' = 1, '3' = 1, '4' = 1,
'5' = 2, '6' = 2, '7' = 2, '8' = 2,
'9'= 2, '10' = 2, '11' = 2, '12' = 2, '13' = 2,
'14' = 2, '15' = 2, '16' = 2,
'17' = 2, '18' = 2)
x$dgraphic <- factor(x$dgraphic,
levels = c(1, 2, -2, -999),
labels = c("White", "BAME", "Refused", "Not Stated"))
x$dgraphic <- as.character(as_factor(x$dgraphic))
}
if (dgraphic == "tenure") {
x$dgraphic <- recode(x$y03, '3' = 3, '5' = 3)
x$dgraphic <- factor(x$dgraphic,
levels = c(1, 2, 3, 4, -1),
labels = c("Own ouright", "Mortgage", "Social rent", "Private rent", "Don't Know"))
x$dgraphic <- as.character(as_factor(x$dgraphic))
}
if (dgraphic == "religion") {
x$dgraphic <- recode(x$y06, '1' = 1, '2' = 1, '3' = 1, '4' = 1,
'5' = 1, '6' = 1, '7' = 1, '8' = 1,
'9'= 1, '10' = 1, '11' = 1, '12' = 2, '13' = 2,
'14' = 2, '15' = 2, '16' = 2, '17' = 2)
x$dgraphic <- factor(x$dgraphic,
levels = c(0, 1, 2, 97),
labels = c("No Religion", "Christian", "Non-Christian", "Refused"))
x$dgraphic <- as.character(as_factor(x$dgraphic))
}
if (dgraphic == "education") {
x$dgraphic <- recode(x$education, '1' = 1, '2' = 1, '3' = 2, '4' = 2,
'5' = 2, '6' = 2, '7' = 2, '8' = 2,
'9'= 2, '10' = 2, '11' = 2, '12' = 2, '13' = 2,
'14' = 2, '15' = 2, '16' = 2, '17' = 2, '18' = 2,
'19' = 2, '20' = 2, '21' = -2)
x$dgraphic <- factor(x$dgraphic,
levels = c(0, 1, 2, -2, -999),
labels = c("No qualifications", "Degree or higher", "Other", "Refused", "Not Stated"))
x$dgraphic <- as.character(as_factor(x$dgraphic))
}
x$turnout <- as.character(as_factor(x$validatedTurnoutBinary))
# Weight data
if (sample == FALSE) {
estimate <- x %>%
group_by(dgraphic, turnout) %>%
summarise(popest = sum(wt_vote_valid, na.rm = TRUE)) # Weight is here
} else {
estimate <- x %>%
group_by(dgraphic, turnout) %>%
summarise(popest = n())
}
estimate$popest <- round(estimate$popest, 0)
# Create table in wide form and remove NA column
estimate <- estimate %>%
spread(turnout, popest, fill = 0) %>%
na.omit(estimate)
# Calculate percentages
if (percent == TRUE) {
estimate <- get_row_percent(estimate, na.rm = TRUE)
} else {
estimate
}
estimate <- select(estimate, dgraphic, Voted, -"<NA>") # Remove hanging "NA" column
# Write CSV
if (write == FALSE) {
estimate
} else {
write_csv(estimate, paste("turnout_", dgraphic, ".csv"))
}
}
turnout_common("religion")
?labelled
devtools::load_all(".")
turnout_common("religion")
devtools::load_all(".")
turnout_common("education")
turnout_common("religion"
)
devtools::load_all(".")
turnout_common("education")
turnout_common("religion")
devtools::load_all(".")
turnout_common("religion")
devtools::load_all(".")
turnout_common("religion")
devtools::load_all(".")
turnout_common("religion")
devtools::load_all(".")
turnout_common("religion")
devtools::load_all(".")
turnout_common("religion")
turnout_common("religion", percent = FALSE, sample = TRUE)
devtools::load_all(".")
x <- haven:: read_spss("bes2017internet.sav")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, result = 0.688)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, result = 0.688, percent = FALSE, sample = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = TRUE)
?contains
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = TRUE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = TRUE, result = 0.688)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = false)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = FALSE, result = 0.6888)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = FALSE)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = TRUE, sample = FALSE, result = 0.688)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = TRUE, sample = FALSE, result = 0.688)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = TRUE, sample = FALSE, result = 0.688)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = TRUE, sample = FALSE, result = 0.688)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = TRUE, sample = FALSE, result = 0.688)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = TRUE, sample = FALSE, result = 0.688)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = TRUE)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = TRUE)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, sample = TRUE)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE, result = 0.688)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE, percent = FALSE)
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE)
devtools::load_all(".")
turnout_query(x, dgraphic = "ageGroup", vote = "genElecTurnoutRetro", wt = "wt_new_W13", validated = FALSE)
install.packages("devtools")
devtools::install_github("yespmedleon/clbes")
